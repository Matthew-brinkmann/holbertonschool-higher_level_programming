Initial task documentation per task.
--------------------------------------
Thoughts for each task:

 > Should we be testing numbers by the python 'inf' (infinity), if so, how??
 and what is the expected result (num / 'inf') or (num * 'inf') is what??
--------------------------------------
Task 0. Integers addition

FUNCTION:
def add_integer(a, b=98):
MODULE DOCUMENTATION:
The Module is designed to supply 1 function for use, the add_integer function
FUNCTION DOCUMENTATION:
The function recieves 2 integers and adds them together, and returns the value.
must be integers (will type check)
Can accept floats, will convert to integers if so.
TEST CASES:
 > send through 2 integers (positive)
 > send through 2 integers (mixed)
 > send through 2 integers (negative)
 > send through incorrect type (string) (both spot a and b)
 > send through incorrect type (list of integers)
 > send through Null Values (both spot a and b)
 > send through very large numbers
 > send through chars cast as int and float
 > send through words cast as int and float

--------------------------------------
--------------------------------------
Task 1. Divide a matrix

FUNCTION:
def matrix_divided(matrix, div):
MODULE DOCUMENTATION:
This moduel is designed to supply 1 funcion for use, the matrix_divided function
FUNCTION DOCUMENTATION:
Function recieves a matrix(matrix) and a number to divide(div) each matrix item by.
Matrix items must be int or float and can be negative
Each matrix row must be the same size
Div must be int or float
div can't be 0
results must be 2 decimal places
TEST CASES:
 > Send through corretly formatted matrix with:
  > Send through Div (positive)
  > Send through Div (Negative)
  > Send through Div (zero)
  > send through Div (character/string)
 > send through correctly formatted div with:
  > send through matrix with negative numbers
  > send through matrix with chars/string
  > send through matrix with different size rows
  > send through empty matrix
 > send through an empy function call
 > send through a function call with only 1 parameter
 > send through correctly formatted matrix and div (positive)
 > send through correctly formatted martix and div (negative)
--------------------------------------
--------------------------------------
Task 2. Say my name

FUNCTION:
def say_my_name(first_name, last_name=""):
MODULE DOCUMENTATION:
This moduel is designed to supply 1 funcion for use, the say_my_name function.
FUNCTION DOCUMENTATION:
function that prints My name is (first name) (last name)
First Name must be a string
Lasat Name must be a string
TEST CASES:
 > Send through blank function
 > Send through only first name
 > send through different value int
 > send through string in a list
 > send through None as first Name
 > send through ASCII values as character
 > send through single letter for first and last name
--------------------------------------
--------------------------------------
Task 3. Print square

FUNCTION:
def print_square(size):
MODULE DOCUMENTATION:
This module is designed to supply 1 funcion for use, the print_square function.
FUNCTION DOCUMENTATION:
function that prints a square with the character #
size is the size length of the square
size must be an integer,
size must be greater than or equal to 0
TEST CASES:
 > Send through a small int
 > Send through a slightly bigger int
 > send through a float
 > send through a string
 > send through a neg number
--------------------------------------
--------------------------------------
Task 4. Text indentation

FUNCTION:
def text_indentation(text):
MODULE DOCUMENTATION:
This module is designed to supply 1 funcion for use
the text_indentation function.
FUNCTION DOCUMENTATION:
function that prints a text with 2 new lines after each of these characters: ., ? and :
text must be a string
There should be no space at the beginning or at the end of each printed line
TEST CASES:
 > send a string (ensuring end and start of lines are ot spaces)
 > string that doesn't end in a fullstop
 > string with multiple spaces at start of sentences.
 > send an int
 > send None
 > send one word
 > send string with newLine in middle of spaces
 > send string with newLine in middle and extra spaces between words
--------------------------------------
