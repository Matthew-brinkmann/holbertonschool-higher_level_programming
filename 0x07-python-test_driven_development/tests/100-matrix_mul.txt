The ``100-matrix_mul`` module
======================

Using ``def matrix_mul(m_a, m_b)``
-------------------


Import function from module:
      >>> matrix_mul = __import__('100-matrix_mul').matrix_mul

Check for Documentation:
      >>> mod_doc = __import__("100-matrix_mul").__doc__
      >>> len(mod_doc) > 1
      True

      >>> func_doc = __import__("100-matrix_mul").matrix_mul.__doc__
      >>> len(func_doc) > 1
      True

Now completing function tests:

      >>> m_a = [[1, 2], [3, 4]]
      >>> m_b = [[1, 2], [3, 4]]
      >>> matrix_mul(m_a, m_b)
      [[7, 10], [15, 22]]

      >>> m_a = []
      >>> matrix_mul(m_a, m_b)
      Traceback (most recent call last):
      ...
      ValueError: m_a can't be empty

      >>> m_a = [[], []]
      >>> matrix_mul(m_a, m_b)
      Traceback (most recent call last):
      ...
      ValueError: m_a can't be empty

      >>> m_a = [[1, "hol"], [3, 4]]
      >>> matrix_mul(m_a, m_b)
      Traceback (most recent call last):
      ...
      TypeError: m_a should contain only integers or floats

      >>> m_a = [[1, 2, 3], [4, 5]]
      >>> matrix_mul(m_a, m_b)
      Traceback (most recent call last):
      ...
      TypeError: each row of m_a must be of the same size

      >>> m_a = [[1, 2]]
      >>> m_b = [[1, 2], [2, 3], [4, 5]]
      >>> matrix_mul(m_a, m_b)
      Traceback (most recent call last):
      ...
      ValueError: m_a and m_b can't be multiplied

      >>> matrix_mul()
      Traceback (most recent call last):
      ...
      TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

      >>> m_a = [[2.5, 2.8], [3.1, 4.9]]
      >>> m_b = [[0.2, 2.6], [5.3, 7.4]]
      >>> matrix_mul(m_a, m_b)
      [[15.339999999999998, 27.22], [26.590000000000003, 44.32000000000001]]
